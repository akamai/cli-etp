#!/usr/bin/env python3

# Copyright 2021 Akamai Technologies, Inc. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Standard modules

import sys
import os
import json
import json.decoder
import ipaddress
import time
import signal
from threading import Event
from enum import Enum
import logging
from urllib.parse import parse_qs
import csv

# 3rd party modules

import requests
from requests.compat import urljoin
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from config import EdgeGridConfig

__version__ = "0.3.7"

#: Window span in ad-hoc mode, default is 15 min
span_duration_min = 15

session = None
verbose = False
section_name = "default"
headers = {'content-type': "application/json;charset=UTF-8"}
extra_qs = None

LOG = logging.getLogger(__name__)

# If all parameters are set already, use them.  Otherwise
# use the config
config = EdgeGridConfig({"verbose": False}, section_name)

#: Verbose mode, configurable with -v or --verbose
verbose = getattr(config, "verbose", False)
#: Fetch limit in seconds, configurable with --limit
fetch_limit = getattr(config, "limit", 3 * 60 * 60)
#: Poll interval (also defin how much data we get each time)
#: Default is 5 minutes, configurable with --poll
poll_interval_sec = getattr(config, "poll", 600)

baseurl = '%s://%s' % ('https', getattr(config, "host", "host-not-set-in-config"))


class ETPListType(Enum):
    """See https://developer.akamai.com/api/enterprise_security/enterprise_threat_protector_configuration/v1.html"""
    IP = "LIST_TYPE_IP"
    DOMAIN = "LIST_TYPE_DOMAIN"


class ETPConfidence(Enum):
    SUSPECTED = 1
    KNOWN = 2


def exit_fromresponse(response):
    """
    Convert an HTTP Code into an CLI return code.
    """
    if response is None:
        exit(1)
    if response.status_code == 200:
        exit(0)
    else:
        reason = None
        try:
            reason = response.json().get("detail")
        except ValueError:
            pass
        sys.stderr.write("ERROR: Exiting with code %s, reason: %s\n" % (response.status_code, reason))
        exit(response.status_code)


def force_unicode(s):
    if sys.version_info.major == 2:
        return unicode(s)
    else:
        return s


def type_hostorip(hostorip):
    """
    Detect if a string is an actual IP address (IPv4 or IPv6) or an hostname
    """
    if ((sys.version_info.major == 2 and not isinstance(hostorip, unicode)) or
        (sys.version_info.major > 2 and not isinstance(hostorip, str))):
        raise ValueError('hostorip must be a unicode string, %s provided' % 
                         type(hostorip).__name__)
    try:
        ipaddress.ip_address(hostorip)
        return ETPListType.IP
    except ValueError:
        return ETPListType.DOMAIN


def iphost_argument_tolist(config):
    for item in config.iporhost:
        if item[0:1] == "@":
            filename = item[1:]
            if filename == "-":
                for line in sys.stdin:
                    yield force_unicode(line.strip())
            else:
                with open(filename, "r") as f:
                    for line in f:
                        yield force_unicode(line.strip())
        else:
            yield force_unicode(item)


def build_params(params=None):
    """
    Prepare querystring arguments as key value pair

    Args:
        params (dict, optional): Querystring Arguments as key-value dict. Defaults to None.

    Returns:
        dict: Fully constructed KV dict
    """
    if isinstance(params, dict):
        final_params = params.copy()
    else:
        final_params = {}
    edgerc = EdgeRc(config.edgerc)
    scanned_extra_qs = edgerc.get(config.section, 'extra_qs', fallback=None)
    if scanned_extra_qs:
        final_params.update(parse_qs(scanned_extra_qs))
    return final_params


class cli:
    """
    Various shared functions for CLI
    """
    @staticmethod
    def write(s):
        print(s)
    
    @staticmethod
    def write_header(s):
        sys.stderr.write(s)
        sys.stderr.write("\n")

    @staticmethod
    def write_footer(s):
        cli.write_header(s)

    @staticmethod
    def write_columns(row):
        writer = csv.writer(sys.stdout)
        writer.writerow(row)

    @staticmethod
    def current_command():
        return "akamai etp " + " ".join(sys.argv[1:])
    

def input2feed(event_type):
    api_eventtype = None
    if event_type == "threat":
        api_eventtype = "threat-events"
    elif event_type == "aup":
        api_eventtype = "aup-events"
    elif event_type == "dns":
        api_eventtype = "dns-activities"
    elif event_type == "proxy":
        api_eventtype = "proxy-traffic/transactions"
    if api_eventtype is None:
        raise ValueError(f'event_type provided is support supported: {event_type}')
    return api_eventtype

def fetch_events(config, output):
    """
    Fetch all events
    """
    stop_event = Event()
    event_count = 0
    byte_count = 0

    def exit_gracefully(signum, frame):
        stop_event.set()

    if config.tail:  # The window span is show so we can keep adding content by small increment
        start = int(time.time()) - fetch_limit - poll_interval_sec
        end = start + poll_interval_sec
        signal.signal(signal.SIGTERM, exit_gracefully)
        signal.signal(signal.SIGINT, exit_gracefully)
    else:  # Larger window span
        start = int(time.time()) - fetch_limit - (span_duration_min * 60)
        if config.start:
            start = config.start
        end = start + (span_duration_min * 60)
        if config.end:
            end = config.end
    try:
        pageSize = 5000  # our recommend value is 5000
        while not stop_event.is_set():
            pageNumber = 1
            numOfPages = 0
            event_interval_count = 0
            while numOfPages == 0 or pageNumber <= numOfPages:
                post_data = {
                    'startTimeSec': start,
                    'endTimeSec': end,
                    'orderBy': "DESC",
                    'pageNumber': pageNumber,
                    'pageSize': pageSize,
                    'filters': {}
                }

                timing_s = time.time()  # The fetch operation can take a while
                event_url = '%(baseurl)s/etp-report/v3/configs/%(config_id)s/%(event_type)s/details' % \
                    {
                        'baseurl': baseurl,
                        'config_id': config.etp_config_id,
                        'event_type': input2feed(config.event_type)
                    }
                LOG.info("{OPEN} API URL: %s" % event_url)
                LOG.info("{OPEN} API POST param %s" % post_data)
                r = session.post(event_url, params=build_params(), json=post_data, headers=headers, timeout=min(300, poll_interval_sec*2))
                byte_count += len(r.content)
                LOG.info("{OPEN} API response code is HTTP/%s, body %s bytes" % (r.status_code, len(r.content)))
                if r.status_code != 200:
                    LOG.error(r.content)
                    break
                LOG.info("{OPEN} API call took %.2f seconds" % (time.time() - timing_s))
                response_data = r.json()

                # Determine maximum page size based on the totalRecords of the first requests reply
                if numOfPages == 0:
                    LOG.info("Page info: %s" % response_data.get("pageInfo", {}))
                    total_records = response_data["pageInfo"]["totalRecords"]
                    numOfPages = int((total_records / pageSize) + 1)
                    LOG.info("Calculated number of pages: %s (based on %s)" % (numOfPages, total_records))

                for e in response_data.get('dataRows', []):
                    output.write("%s\n" % json.dumps(e))
                    event_count += 1
                    event_interval_count += 1
                output.flush()
                pageNumber += 1
                LOG.info(f"{event_interval_count} event(s) for current {poll_interval_sec}s interval [{start} -> {end}], {pageNumber - 1} page(s).")
            if not config.tail:
                break
            else:
                LOG.info("%d event(s) fetched so far" % event_count)
                # Here we assume the fetch should take less than poll_interval_sec
                # otherwise we may have datagaps
                # TODO: add a better/more resilient logic
                sleep_time = max(0, poll_interval_sec - (time.time() - timing_s))
                if sleep_time == 0:
                    LOG.warning(f"Drifting, consider increase the poll interval (currently {poll_interval_sec}s)")
                if not stop_event.wait(sleep_time):
                    LOG.info("Sleeping for %.2f sec..." % sleep_time)
                    # prior to 0.3.5
                    # start = int(time.time()) - fetch_limit - poll_interval_sec
                    # end = start + poll_interval_sec
                    # after 0.3.5
                    start = end # next cycle resume where we finish this one
                    end = int(time.time()) - fetch_limit # the window ends at now - limit
                    LOG.info(f"Next cycle will be from {start} to {end} [{end - start}s]...")
    except KeyboardInterrupt:
        stop_event.set()
        LOG.warning("Keyboard interrupt detected")
    except requests.exceptions.ReadTimeout:
        LOG.warning(f"Request timeout, consider increase poll interval (currently {poll_interval_sec}s)")
    finally:
        LOG.info(f"{event_count} event(s) fetched in total, {byte_count} byte(s)")


def list_add_or_delete(config):
    # Maps security command line argument with dict key
    action_key = "add"
    if config.list_action == "remove":
        action_key = "delete"
    confidence = ETPConfidence.KNOWN
    if action_key == "add" and config.suspect:
        confidence = ETPConfidence.SUSPECTED

    LOG.info("%s %s to the list %s (confidence: %s)" %
             (action_key, config.iporhost, config.listid, confidence))

    add_item_url = urljoin(baseurl, "/etp-config/v1/configs/%s/lists/%s/items" %
                           (config.etp_config_id, config.listid))

    LOG.info("Webservice URL: %s" % add_item_url)

    change = {
        "add": [],
        "delete": []
        }
    for item in iphost_argument_tolist(config):
        if action_key == "add":
            change[action_key].append({
                "type": type_hostorip(item).value,
                "value": item,
                "confidenceLevelId": confidence.value
            })
        else:
            change[action_key].append(item)
    if verbose:
        print("== payload ===")
        print(json.dumps(change))

    r = session.patch(add_item_url,  params=build_params(), data=json.dumps(change), headers=headers)
    exit_fromresponse(r)


class ioc:

    recordType = 'DOMAIN'

    @staticmethod
    def isrisky(domain):
        params = {'record': domain, 'recordType': ioc.recordType}
        path = '/etp-report/v1/ioc/domain-tree'
        resp = session.get(urljoin(baseurl, path), params=build_params(params))
        LOG.info("API: %s returns HTTP/%s" % (path, resp.status_code))
        domaintree = resp.json()
        return len(domaintree) > 0

    @staticmethod
    def info(domain):
        """IOC information about the domain."""
        params = {'record': domain, 'recordType': ioc.recordType}
        path = '/etp-report/v1/ioc/information'
        resp = session.get(urljoin(baseurl, path), params=build_params(params))
        LOG.info("API: %s returns HTTP/%s" % (path, resp.status_code))
        print(resp.text)

    @staticmethod
    def timeseries(domain):
        """IOC time series about the domain."""
        params = {'record': domain, 'recordType': ioc.recordType}
        path = "/etp-report/v1/configs/100/ioc/time-series"
        resp = session.get(urljoin(baseurl, path), params=build_params(params))
        LOG.info("API: %s returns HTTP/%s" % (path, resp.status_code))
        data = resp.json()
        if len(data.get('rows', [])) > 0:
            print(resp.text)
        else:
            sys.stderr.write("Domain not seen before.\n")
            sys.exit(3)

    @staticmethod
    def changes(domain):
        """IOC observed changes on a domain."""
        params = {'record': domain, 'recordType': ioc.recordType}
        path = '/etp-report/v1/ioc/changes'
        resp = session.get(urljoin(baseurl, path), params=build_params(params))
        LOG.info("API: %s returns HTTP/%s" % (path, resp.status_code))
        print(resp.text)


class report:

    @staticmethod
    def active_clients(start, end, configId=None):
        path = '/etp-config/v3/configs/{configId}/client/status'.format(configId = configId or config.etp_config_id)
        params = {'startTimeSec': start, 'endTimeSec': end}
        resp = session.get(urljoin(baseurl, path), params=build_params(params))
        grand_total = 0
        for os in resp.json().get('installed', []):
            grand_total += os.get('total', 0)
        return grand_total


class tenant:
    """
    Operate on sub-tenants, ETP feature introduce late 2021.
    """
    @staticmethod
    def _get_all():
        path = '/etp-config/v3/configs/{configId}/tenants'.format(configId = config.etp_config_id)
        resp = session.get(urljoin(baseurl, path))
        if resp.status_code != 200:
            sys.stderr.write(f"Error fetching tenants:\n{resp.text}\n")
            sys.exit(2)
        return resp.json()

    @staticmethod
    def list():
        tenants = tenant._get_all()
        cli.write_header('# Command: {0}'.format(cli.current_command()))
        cli.write_header("# ConfigID, name")
        for t in tenants:
            cli.write_columns((t.get("id"), t.get("name")))

    @staticmethod
    def report_active_clients():

        tenants = tenant._get_all()

        # Date/time boundaries
        end = config.end or int(time.time())
        start = config.start or (end - (30 * 24 * 60 * 60))

        # CSV Headers
        cli.write_header('# Command: {0}'.format(cli.current_command()))
        cli.write_header(f'# Report start: {start}')
        cli.write_header(f'# Report end: {end}')
        cli.write_header("# config_id, tenant_name, active_client_count")

        for t in tenants:
            cli.write_columns((t.get('id'),  t.get('name'), report.active_clients(start, end, t.get('id'))))


def log_level():
    if config.debug:
        return logging.DEBUG
    elif config.verbose:
        return logging.INFO
    else:
        return logging.ERROR

def prepare_session(config):
    """
    Prepare a Session object to issue request against Akamai {OPEN} API
    """
    s = requests.Session()

    # Initialize Requests Session for the API calls
    s.auth = EdgeGridAuth(
        client_token=config.client_token,
        client_secret=config.client_secret,
        access_token=config.access_token
    )

    # Proxy
    if config.proxy:
        LOG.info("Set proxy to %s" % config.proxy)
        s.proxies['https'] = 'http://%s' % config.proxy

    # User agent, with an optional prefix
    s.headers.update({'User-Agent': f"{config.ua_prefix} cli-etp/{__version__}"})

    return s

def main():

    global session

    logging.basicConfig(
        filename=config.logfile, level=log_level(),
        format='%(asctime)s %(levelname).1s %(message)s'
    )

    LOG.info("Python %s" % sys.version)
    LOG.info("PID: %s" % os.getpid())
    LOG.info("Command is: %s" % config.command)
    LOG.info("ETP Config ID: %s" % getattr(config, 'etp_config_id', None))
    LOG.info(f"Tail fetch limit: {fetch_limit} seconds")
    LOG.info(f"Tail poll interval: {poll_interval_sec} seconds")

    if not config.command:
        config.parser.print_help()
        sys.exit(0)
    elif config.command == "version":
        print(__version__)
        sys.exit(0)

    session = prepare_session(config)

    if config.command == "event":
        if config.output is None:
            out = sys.stdout
        else:
            LOG.info("Output file: %s" % config.output)
            out = open(config.output, 'w+')
        try:
            fetch_events(config, out)
        finally:
            if out is not None and out != sys.stdout:
                LOG.info("Closing output file %s..." % config.output)
                out.close()

    elif config.command == "list":
        if config.list_action in ("add", "remove"):
            list_add_or_delete(config)
        elif config.list_action == "deploy":
            url = urljoin(baseurl, "/etp-config/v1/configs/%s/lists/deployments" % config.etp_config_id)
            payload = {
                "id": config.listid,
                "status": "PENDING"
            }
            r = session.post(url, params=build_params(), data=json.dumps(payload), headers=headers)
            exit_fromresponse(r)
        elif config.list_action == "get":
            if config.listid:
                url = urljoin(baseurl, "/etp-config/v1/configs/{configId}/lists/{listId}/items".format(
                    configId=config.etp_config_id,
                    listId=config.listid
                ))
                r = session.get(url, params=build_params(), headers=headers)
                if r.status_code == 200:
                    for dom in r.json().get("items", []):
                        print(dom.get('value'))
                exit_fromresponse(r)
            else:
                url = urljoin(baseurl, "/etp-config/v1/configs/%s/lists" % (config.etp_config_id))
                r = session.get(url, params=build_params(), headers=headers)
                if r.status_code == 200:
                    for list_item in r.json():
                        print("%s,%s" % (list_item.get("id"), list_item.get('name')))
                exit_fromresponse(r)
        else:
            sys.stderr.write("Action %s not implemented.\n" % config.list_action)
    elif config.command == "ioc":
        if not config.domain or not ioc.isrisky(config.domain):
            sys.exit(2)
        if config.ioc_action == "info":
            ioc.info(config.domain)
        if config.ioc_action == "timeseries":
            ioc.timeseries(config.domain)
        elif config.ioc_action == "changes":
            ioc.changes(config.domain)
    elif config.command == "tenant":
        if config.operation == "list":
            tenant.list()
        elif config.operation == "clients":
            tenant.report_active_clients()
        else:
            print("Not supported")

if __name__ == '__main__':
    main()