#!/usr/bin/env python3

# Copyright 2020 Akamai Technologies, Inc. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Standard modules

import sys
import os
import json
import json.decoder
import ipaddress
import time
import signal
from threading import Event
from enum import Enum
import logging

# 3rd party modules

import requests
from requests.compat import urljoin
from akamai.edgegrid import EdgeGridAuth
from config import EdgeGridConfig

__version__ = "0.3.0"

#: Data collection delay, default is 30 minutes
collection_delay_min = 30
#: Window span in ad-hoc mode, default is 15 min
span_duration_min = 15
#: How often we poll in --tail mode, default is 60 sec
poll_interval_sec = 60

session = requests.Session()
verbose = False
section_name = "default"

LOG = logging.getLogger(__name__)

# If all parameters are set already, use them.  Otherwise
# use the config
config = EdgeGridConfig({"verbose": False}, section_name)
verbose = getattr(config, "verbose", False)

# Set auth
session.auth = EdgeGridAuth(
    client_token=config.client_token,
    client_secret=config.client_secret,
    access_token=config.access_token
)

session.headers.update({'User-Agent': "Akamai-CLI etp/%s" % __version__})
headers = {'content-type': "application/json;charset=UTF-8"}
baseurl = '%s://%s' % ('https', config.host)

class ETPListType(Enum):
    """See https://developer.akamai.com/api/enterprise_security/enterprise_threat_protector_configuration/v1.html"""
    IP = "LIST_TYPE_IP"
    DOMAIN = "LIST_TYPE_DOMAIN"

class ETPConfidence(Enum):
    SUSPECTED = 1
    KNOWN = 2

def exit_fromresponse(response):
    """
    Convert an HTTP Code into an CLI return code.
    """
    if response is None:
        exit(1)
    if response.status_code == 200:
        exit(0)
    else:
        reason = None
        try:
            reason = response.json().get("detail")
        except ValueError:
            pass
        sys.stderr.write("ERROR: Exiting with code %s, reason: %s\n" % (response.status_code, reason))
        exit(response.status_code)

def force_unicode(s):
    if sys.version_info.major == 2:
        return unicode(s)
    else:
        return s

def type_hostorip(hostorip):
    """
    Detect if a string is an actual IP address (IPv4 or IPv6) or an hostname
    """
    if ((sys.version_info.major == 2 and not isinstance(hostorip, unicode)) or
        (sys.version_info.major > 2 and not isinstance(hostorip, str))):
        raise ValueError('hostorip must be a unicode string, %s provided' % 
                         type(hostorip).__name__)
    try:
        ipaddress.ip_address(hostorip)
        return ETPListType.IP
    except ValueError:
        return ETPListType.DOMAIN

def iphost_argument_tolist(config):
    for item in config.iporhost:
        if item[0:1] == "@":
            filename = item[1:]
            if filename == "-":
                for line in sys.stdin:
                    yield force_unicode(line.strip())
            else:
                with open(filename, "r") as f:
                    for line in f:
                        yield force_unicode(line.strip())
        else:
            yield force_unicode(item)


def fetch_events(config, output):
    """
    Fetch all events
    """
    stop_event = Event()
    event_count = 0

    def exit_gracefully(signum, frame):
        stop_event.set()

    if config.tail: # The window span is show so we can keep adding content by small increment
        start = int(time.time()) - (collection_delay_min * 60) - poll_interval_sec
        end = start + poll_interval_sec
        signal.signal(signal.SIGTERM, exit_gracefully)
        signal.signal(signal.SIGINT, exit_gracefully)
    else: # Larger window span
        start = int(time.time()) - (collection_delay_min * 60) - (span_duration_min * 60)
        if config.start:
            start = config.start
        end = start + (span_duration_min * 60)
        if config.end:
            end = config.end
    try:
        while not stop_event.is_set():
            timing_s = time.time() # The fetch operation can take a while
            event_url = ('%(baseurl)s/etp-report/v1/configs/%(config_id)s/%(event_type)s-events/details'
                        '?startTimeSec=%(start)s&endTimeSec=%(end)s') % {
                        'baseurl': baseurl,
                        'config_id': config.etp_config_id,
                        'event_type': config.event_type,
                        'start': start,
                        'end': end
                        }
            LOG.info("{OPEN} API URL: %s" % event_url)
            r = session.get(event_url, headers=headers)
            LOG.info("{OPEN} API call took %.2f seconds" % (time.time() - timing_s))
            if r.status_code != 200:
                LOG.warn("API call failed, code: %s, %s" % (r.status_code, r.content))
            else:
                for e in r.json():
                    output.write("%s\n" % json.dumps(e))
                    event_count += 1
                output.flush()
            if not config.tail:
                break
            else:
                LOG.info("%d event(s) fetched so far" % event_count)
                # Here we assume the fetch should take less than poll_interval_sec
                # otherwise we may have datagaps
                # TODO: add a better/more resilient logic
                sleep_time = max(0, poll_interval_sec - (time.time() - timing_s))
                if sleep_time == 0:
                    LOG.WARN("Potential data gaps")
                LOG.info("Sleeping for %.2f sec..." % sleep_time)
                stop_event.wait(sleep_time)
                start = int(time.time()) - (collection_delay_min * 60) - poll_interval_sec
                end = start + poll_interval_sec
                LOG.info("Next cycle will be from %s to %s..." % (start, end))
    finally:
        LOG.info("%d event(s) fetched in total" % event_count)

def list_add_or_delete(config):
    # Maps security command line argument with dict key
    action_key = "add"
    if config.list_action == "remove":
        action_key = "delete"
    confidence = ETPConfidence.KNOWN
    if action_key == "add" and config.suspect:
        confidence = ETPConfidence.SUSPECTED

    LOG.info("%s %s to the list %s (confidence: %s)" % 
             (action_key, config.iporhost, config.listid, confidence))

    add_item_url = urljoin(baseurl, "/etp-config/v1/configs/%s/lists/%s/items" % 
        (config.etp_config_id, config.listid))

    LOG.info("Webservice URL: %s" % add_item_url)

    change = {
        "add": [],
        "delete": []
        }
    for item in iphost_argument_tolist(config):
        if action_key == "add":
            change[action_key].append({
                "type": type_hostorip(item).value,
                "value": item,
                "confidenceLevelId": confidence.value
                }) 
        else:
             change[action_key].append(item)
    if verbose:
        print("== payload ===")
        print(json.dumps(change))
    
    r = session.patch(add_item_url,  data=json.dumps(change), headers=headers)
    exit_fromresponse(r)


class ioc:

    recordType = 'DOMAIN'

    @staticmethod
    def isrisky(domain):
        params = {'record': domain, 'recordType': ioc.recordType}
        path = '/etp-report/v1/ioc/domain-tree'
        resp = session.get(urljoin(baseurl, path), params=params)
        LOG.info("API: %s returns HTTP/%s" % (path, resp.status_code))
        domaintree = resp.json()
        return len(domaintree) > 0

    @staticmethod
    def info(domain):
        """IOC information about the domain."""
        params = {'record': domain, 'recordType': ioc.recordType}
        path = '/etp-report/v1/ioc/information'
        resp = session.get(urljoin(baseurl, path), params=params)
        LOG.info("API: %s returns HTTP/%s" % (path, resp.status_code))
        print(resp.text)

    @staticmethod
    def timeseries(domain):
        """IOC time series about the domain."""
        params = {'record': domain, 'recordType': ioc.recordType}
        path = "/etp-report/v1/configs/100/ioc/time-series"
        resp = session.get(urljoin(baseurl, path), params=params)
        LOG.info("API: %s returns HTTP/%s" % (path, resp.status_code))
        data = resp.json()
        if len(data.get('rows', [])) > 0:
            print(resp.text)
        else:
            sys.stderr.write("Domain not seen before.\n")
            sys.exit(3)

    @staticmethod
    def changes(domain):
        """IOC observed changes on a domain."""
        params = {'record': domain, 'recordType': ioc.recordType}
        path = '/etp-report/v1/ioc/changes'
        resp = session.get(urljoin(baseurl, path), params=params)
        LOG.info("API: %s returns HTTP/%s" % (path, resp.status_code))
        print(resp.text)


def log_level():
    if config.debug:
        return logging.DEBUG
    elif config.verbose:
        return logging.INFO
    else:
        return logging.ERROR


def main():

    logging.basicConfig(filename=config.logfile, level=log_level(),
        format='%(asctime)s [%(levelname)s] %(threadName)s %(message)s')

    LOG.info("Python %s" % sys.version)
    LOG.info("PID: %s" % os.getpid())
    LOG.info("Command is: %s" % config.command)
    LOG.info("ETP Config ID: %s" % config.etp_config_id)

    if config.command == "event":
        if config.output is None:
            out = sys.stdout
        else:
            LOG.info("Output file: %s" % config.output)
            out = open(config.output, 'w+')
        try:
            fetch_events(config, out)
        finally:
            if out is not None and out != sys.stdout:
                LOG.info("Closing output file %s..." % config.output)
                out.close()

    elif config.command == "list":
        if config.list_action in ("add", "remove"):
            list_add_or_delete(config)
        elif config.list_action == "deploy":
            url = urljoin(baseurl, "/etp-config/v1/configs/%s/lists/deployments" % config.etp_config_id)
            payload = {
                "id": config.listid,
                "status": "PENDING"
            }
            r = session.post(url, data=json.dumps(payload), headers=headers)
            exit_fromresponse(r)
        elif config.list_action == "get":
            if config.listid:
                url = urljoin(baseurl, "/etp-config/v1/configs/{configId}/lists/{listId}/items".format(
                    configId=config.etp_config_id,
                    listId=config.listid
                ))
                r = session.get(url, headers=headers)
                if r.status_code == 200:
                    for dom in r.json().get("items", []):
                        print(dom.get('value'))
                exit_fromresponse(r)
            else:
                url = urljoin(baseurl, "/etp-config/v1/configs/%s/lists" % (config.etp_config_id))
                r = session.get(url, headers=headers)
                if r.status_code == 200:
                    for l in r.json():
                        print("%s,%s" % (l.get("id"), l.get('name')))
                exit_fromresponse(r)
        else:
            sys.stderr.write("Action %s not implemented.\n" % config.list_action)
    elif config.command == "ioc":
        if not config.domain or not ioc.isrisky(config.domain):
            sys.exit(2)
        if config.ioc_action == "info":
            ioc.info(config.domain)
        if config.ioc_action == "timeseries":
            ioc.timeseries(config.domain)
        elif config.ioc_action == "changes":
            ioc.changes(config.domain)
        
    elif config.command == "version":
        print(__version__)


if __name__ == '__main__':
    main()